# -*- coding: utf-8 -*-
"""Agent_Based_Model_Simulation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WeDl_uBpFfhCKpp2YsGiEu9yTA0mpcSj

A colleague of yours is asking why we need a model, cant we just use the taxi trips directly? You could, but you need to be able to keep the state of each of the agents across time. Agents (people) shouldn’t just vanish from trip to trip. If an agent becomes exposed and finally infected that agent should be remembered as being in this state for sometime and in fact transition to other states (e.g. recover) depending on an epidemiological model (see below).

You point out that the Berlin visualization is based on this dynamic epidemiological model and you suggest that a team must use the Mesa Agent Based Modeling library to simulate the agents and keep track of all agents’ state (movements, health state transitions) and finally export all agents in a data file for analysis and plotting of infection rates etc.

Relevant Links:

https://pantelis.github.io/cs634/docs/common/projects/mobility-control/

https://github.com/pantelis/cs634-summer-2020-capstone

https://github.com/pantelis/cs634-summer-2020-capstone/tree/develop

https://colab.research.google.com/drive/1dqbgCM7z5fAUMdpfAz7Q5bAps3Fenwcv

https://en.wikipedia.org/wiki/Agent-based_model

https://github.com/projectmesa/mesa

https://github.com/projectmesa/mesa/blob/master/docs/tutorials/intro_tutorial.ipynb
"""

#Install Mesa
!pip install mesa

#Retrieve/Assign Unique Identifier for each agent

#Retrieve Data from Mobility Model & Epidemiological Model

#Get/Set Current Position

#Get/Set Previous Movements

#Health State Transitions

#Pass data to mobility controller

"""Test Mesa **Setting up Model** *Money*"""

from mesa import Agent, Model

class MoneyAgent(Agent):
    """An agent with fixed initial wealth."""
    def __init__(self, unique_id, model):
        super().__init__(unique_id, model)
        self.wealth = 1

class MoneyModel(Model):
    """A model with some number of agents."""
    def __init__(self, N):
        self.num_agents = N
        # Create agents
        for i in range(self.num_agents):
            a = MoneyAgent(i, self)

"""Adding the Scheduler"""

from mesa import Agent, Model
from mesa.time import RandomActivation

class MoneyAgent(Agent):
    """ An agent with fixed initial wealth."""
    def __init__(self, unique_id, model):
        super().__init__(unique_id, model)
        self.wealth = 1

    def step(self):
        # The agent's step will go here.
        # For demonstration purposes we will print the agent's unique_id
        print ("Hi, I am agent " + str(self.unique_id) +".")

class MoneyModel(Model):
    """A model with some number of agents."""
    def __init__(self, N):
        self.num_agents = N
        self.schedule = RandomActivation(self)
        # Create agents
        for i in range(self.num_agents):
            a = MoneyAgent(i, self)
            self.schedule.add(a)

    def step(self):
        '''Advance the model by one step.'''
        self.schedule.step()

"""**Create Model Object, Run for 1 Step**"""

empty_model = MoneyModel(10)
empty_model.step()